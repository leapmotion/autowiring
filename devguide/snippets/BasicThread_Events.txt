class PrimeEvent {
    public:
        virtual void onPrime(unsigned long int prime) = 0;
};

class PrimeGenerator : public BasicThread {
    public:
        AutoFired<PrimeEvent> primeDispatcher;
        void Run() override {
            unsigned long int test = 2;
            while (!ShouldStop())
            {
                for (unsigned long int i = test/2; i > 0 ; --i) {
                    if (i == 1) {
                        primeDispatcher(&PrimeEvent::onPrime)(test);
                    }
                    if (test % i == 0) {break;}
                }
                test++;
            }
        }
};

class PrimeListener : public PrimeEvent{
    public:
        void onPrime(unsigned long int prime) override {
            std::cout << "Prime: " << prime << std::endl;
        }
};

AutoCreateContext ctxt;
CurrentContextPusher pusher(ctxt);
AutoRequired<PrimeGenerator> generator;
AutoRequired<PrimeListener> listener;

ctxt->Initiate();
ctxt->Wait(std::chrono::milliseconds(100));
ctxt->SignalShutdown(true);
