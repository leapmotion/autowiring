#
# Setup testing
#

add_googletest(test)
add_googletest(benchmark)

#
# Configure source files
#

set(Autowiring_SRCS
  AnySharedPointer.cpp
  AnySharedPointer.h
  atomic_object.h
  at_exit.h
  AutoCheckout.h
  AutoFilterDescriptor.h
  AutoFuture.cpp
  AutoFuture.h
  AutoInjectable.cpp
  AutoInjectable.h
  AutoMerge.h
  AutoPacket.cpp
  AutoPacket.h
  AutoPacketFactory.cpp
  AutoPacketFactory.h
  AutoPacketProfiler.cpp
  AutoPacketProfiler.h
  AutoRestarter.h
  AutoSelfUpdate.h
  AutoStile.h
  AutoTimeStamp.h
  AutowirableSlot.cpp
  AutowirableSlot.h
  Autowired.cpp
  Autowired.h
  autowiring.h
  AutowiringConfig.h
  AutowiringConfig.h
  AutowiringEvents.cpp
  AutowiringEvents.h
  autowiring_error.cpp
  autowiring_error.h
  auto_arg.cpp
  auto_arg.h
  auto_in.h
  auto_out.h
  BasicThread.cpp
  BasicThread.h
  BasicThreadStateBlock.cpp
  BasicThreadStateBlock.h
  Bolt.h
  BoltBase.cpp
  BoltBase.h
  CallExtractor.h
  ContextCreator.h
  ContextCreatorBase.cpp
  ContextCreatorBase.h
  ContextEnumerator.cpp
  ContextEnumerator.h
  ContextMap.h
  ContextMember.cpp
  ContextMember.h
  CoreContext.cpp
  CoreContext.h
  CoreContextStateBlock.cpp
  CoreContextStateBlock.h
  CoreJob.cpp
  CoreJob.h
  CoreRunnable.cpp
  CoreRunnable.h
  CoreThread.cpp
  CoreThread.h
  CreationRules.h
  CurrentContextPusher.cpp
  CurrentContextPusher.h
  DataFlow.h
  DeclareAutoFilter.h
  DeclareElseFilter.h
  Decompose.h
  DecorationDisposition.h
  Deferred.h
  demangle.cpp
  demangle.h
  Deserialize.h
  DispatchQueue.cpp
  DispatchQueue.h
  DispatchThunk.h
  EventInputStream.h
  EventOutputStream.cpp
  EventOutputStream.h
  EventRegistry.cpp
  EventRegistry.h
  ExceptionFilter.cpp
  ExceptionFilter.h
  fast_pointer_cast.h
  GlobalCoreContext.cpp
  GlobalCoreContext.h
  hash_tuple.h
  has_autofilter.h
  has_autoinit.h
  has_simple_constructor.h
  has_static_new.h
  index_tuple.h
  InterlockedExchange.h
  InvokeRelay.h
  is_any.h
  is_shared_ptr.h
  JunctionBox.h
  JunctionBoxBase.cpp
  JunctionBoxBase.h
  JunctionBoxEntry.h
  JunctionBoxManager.cpp
  JunctionBoxManager.h
  member_new_type.h
  MicroAutoFilter.h
  MicroBolt.h
  NewAutoFilter.h
  Object.cpp
  Object.h
  ObjectPool.h
  ObjectPoolMonitor.cpp
  ObjectPoolMonitor.h
  ObjectTraits.h
  optional_ptr.h
  SatCounter.h
  SharedPointerSlot.h
  SlotInformation.cpp
  SlotInformation.h
  TeardownNotifier.cpp
  TeardownNotifier.h
  ThreadStatusBlock.cpp
  ThreadStatusBlock.h
  thread_specific_ptr.h
  TypeIdentifier.h
  TypeRegistry.cpp
  TypeRegistry.h
  TypeUnifier.h
  unlock_object.h
  uuid.h
  var_logic.h
)

if(NOT AUTOWIRING_BUILD_AUTONET)
  list(APPEND Autowiring_SRCS DefaultAutoNetServer.cpp)
endif()

if(NOT APPLE)
  # avoid warning: has no symbols
  set(Autowiring_SRCS
    ${Autowiring_SRCS}
    uuid.cpp
  )
endif()

set(Autowiring_Win_SRCS
  CoreThreadWin.cpp
  InterlockedExchangeWin.cpp
  thread_specific_ptr_win.h
)

set(Autowiring_Unix_SRCS
  InterlockedExchangeUnix.cpp
  thread_specific_ptr_unix.h
)

set(Autowiring_Mac_SRCS
  CoreThreadMac.cpp
)

set(Autowiring_Linux_SRCS
  CoreThreadLinux.cpp
)

ADD_MSVC_DISABLED_FILES("Unix Source" Autowiring_SRCS ${Autowiring_Unix_SRCS})

if(WIN32)
 set(Autowiring_SRCS ${Autowiring_Win_SRCS} ${Autowiring_SRCS})

  if(!BUILD_64_BIT)
    enable_language(ASM_MASM)
    set(Autowiring_SRCS interlocked.asm ${Autowiring_SRCS} )
  endif()
else()
  if(APPLE)
    set(Autowiring_SRCS ${Autowiring_Mac_SRCS} ${Autowiring_SRCS})
  else()
    set(Autowiring_SRCS ${Autowiring_Linux_SRCS} ${Autowiring_SRCS})
  endif()

  set(Autowiring_SRCS ${Autowiring_Unix_SRCS} ${Autowiring_SRCS})
endif()

rewrite_header_paths(Autowiring_SRCS)
ADD_MSVC_PRECOMPILED_HEADER("stdafx.h" "stdafx.cpp" Autowiring_SRCS)

#
# Configure library
#

add_library(Autowiring STATIC ${Autowiring_SRCS})

target_include_directories(Autowiring INTERFACE
  "$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}>"
  "$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/include>"
)
set_property(TARGET Autowiring PROPERTY FOLDER "Autowiring")

# The boost C++11 shim is required when building without autowiring_USE_LIBCXX off Windows
# We do not mention the link libraries; rather, we require that downstream clients
# satisfy this link dependency.
if(NOT WIN32 AND NOT autowiring_USE_LIBCXX)
  find_package(Boost COMPONENTS thread atomic chrono system date_time QUIET)
endif()

# Need multithreading services if available
find_package(Threads)
if(Threads_FOUND)
  if(CMAKE_USE_PTHREADS_INIT)
    target_link_libraries(Autowiring ${CMAKE_THREAD_LIBS_INIT})
  endif()
endif()

#
# Install library
#

if(NOT AUTOWIRING_IS_EMBEDDED)
  install(TARGETS Autowiring EXPORT AutowiringTargets
    DESTINATION lib
    COMPONENT autowiring
    CONFIGURATIONS ${CMAKE_CONFIGURATION_TYPES}
  )
endif()
