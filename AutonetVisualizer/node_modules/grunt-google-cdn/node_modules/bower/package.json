{
  "name": "bower",
  "description": "The browser package manager.",
  "version": "0.9.2",
  "author": {
    "name": "Twitter"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/bower/bower/blob/master/LICENSE"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/bower/bower"
  },
  "main": "lib",
  "homepage": "http://bower.io/",
  "engines": {
    "node": ">=0.8.0"
  },
  "dependencies": {
    "abbrev": "~1.0.4",
    "archy": "~0.0.2",
    "async": "~0.2.5",
    "colors": "~0.6.0-1",
    "fstream": "~0.1.19",
    "glob": "~3.1.14",
    "hogan.js": "~2.0.0",
    "lodash": "~1.0.1",
    "mkdirp": "~0.3.4",
    "nopt": "~2.0.0",
    "promptly": "~0.1.0",
    "rc": "~0.0.6",
    "read-package-json": "~0.1.8",
    "request": "~2.11.4",
    "rimraf": "~2.0.3",
    "semver": "~1.1.0",
    "stable": "~0.1.2",
    "tar": "~0.1.13",
    "tmp": "~0.0.17",
    "unzip": "0.1.7",
    "update-notifier": "~0.1.3"
  },
  "scripts": {
    "test": "mocha --reporter spec --timeout 40000"
  },
  "devDependencies": {
    "mocha": "~1.8.1",
    "nock": "~0.17.3"
  },
  "bin": {
    "bower": "bin/bower"
  },
  "preferGlobal": true,
  "readme": "# BOWER [![Build Status](https://secure.travis-ci.org/bower/bower.png?branch=master)](http://travis-ci.org/bower/bower)\n\nBower is a package manager for the web. It offers a generic, unopinionated\nsolution to the problem of **front-end package management**, while exposing the\npackage dependency model via an API that can be consumed by a more opinionated\nbuild stack. There are no system wide dependencies, no dependencies are shared\nbetween different apps, and the dependency tree is flat.\n\nBower runs over Git, and is package-agnostic. A packaged component can be made\nup of any type of asset, and use any type of transport (e.g., AMD, CommonJS,\netc.).\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\n\n## Installing Bower\n\nBower depends on [Node](http://nodejs.org/) and [npm](http://npmjs.org/). It's\ninstalled globally using npm:\n\n```\nnpm install -g bower\n```\n\n\n## Usage\n\nMuch more information is available via `bower help` once it's installed. This\nis just enough to get you started.\n\n### Installing packages and dependencies\n\nBower offers several ways to install packages:\n\n```bash\n# Using the dependencies listed in the current directory's bower.json\nbower install\n# Using a local or remote package\nbower install <package>\n# Using a specific Git-tagged version from a remote package\nbower install <package>#<version>\n```\n\nWhere `<package>` can be any one of the following:\n\n* A name that maps to a package registered with Bower, e.g, `jquery`. ‡\n* A remote Git endpoint, e.g., `git://github.com/someone/some-package.git`. Can be\n  public or private. ‡\n* A local Git endpoint, i.e., a folder that's a Git repository. ‡\n* A shorthand endpoint, e.g., `someone/some-package` (defaults to GitHub). ‡\n* A URL to a file, including `zip` and `tar.gz` files. It's contents will be\n  extracted.\n\n‡ These types of `<package>` make Git tags available. You can specify a\n[semver](http://semver.org/) tag to fetch a specific release, and lock the\npackage to that version.\n\nAll package contents are installed in the `components` directory by default.\nYou should **never** directly modify the contents of this directory.\n\nUsing `bower list` will show all the packages that are installed locally.\n\n**N.B.** If you aren't authoring a package that is intended to be consumed by\nothers (e.g., you're building a web app), you should always check installed\npackages into source control.\n\n### Finding packages\n\nTo search for packages registered with Bower:\n\n```\nbower search [<name>]\n```\n\nUsing just `bower search` will list all packages in the registry.\n\n### Using packages\n\nThe easiest approach is to use Bower statically, just reference the package's\ninstalled components manually using a `script` tag:\n\n```html\n<script src=\"/bower_components/jquery/index.js\"></script>\n```\n\nFor more complex projects, you'll probably want to concatenate your scripts or\nuse a module loader. Bower is just a package manager, but there are plenty of\nother tools -- such as [Sprockets](https://github.com/sstephenson/sprockets)\nand [RequireJS](http://requirejs.org/) -- that will help you do this.\n\n### Registering packages\n\nTo register a new package, there **must** be a valid manifest JSON in the\ncurrent working directory, your package **must** be available at a Git endpoint\n(e.g., GitHub), and it should use [semver](http://semver.org/) Git tags. Then\nrun:\n\n```\nbower register <my-package-name> <git-endpoint>\n```\n\nThe Bower registry does not have authentication or user management. It's on a\nfirst come, first served basis. Think of it like a URL shortener. Now anyone\ncan run `bower install <my-package-name>`, and get your library installed.\n\nThere is no direct way to unregister a package yet. For now, you can [request a\npackage be unregistered](https://github.com/bower/bower/issues/120).\n\n### Uninstalling packages\n\nTo uninstall a locally installed package:\n\n```\nbower uninstall <package-name>\n```\n\n\n## Configuration\n\nBower can be configured using JSON in a `.bowerrc` file.\n\nGlobal configuration is handled by creating a `.bowerrc` in your home directory\n(i.e., `~/.bowerrc`).  Local configuration is handled by creating a `.bowerrc`\nin your project's directory, allowing you to version a project-specific Bower\nconfiguration with the rest of your code base.\n\nBower will combine the local and global configurations (with local settings\ntaking precedence).\n\nThe `.bowerrc` defines several options:\n\n* `directory`: Set the default directory to install packaged components into.\n* `endpoint`: Set a custom registry endpoint.\n* `json`: Set the default JSON file for Bower to use when resolving dependencies.\n* `searchpath`: An array of additional URLs pointing to read-only Bower registries.\n* `shorthand_resolver`: Define a custom template for shorthand package names.\n\n```json\n{\n  \"directory\": \"bower_components\",\n  \"endpoint\": \"https://bower.mycompany.com\",\n  \"json\": \"bower.json\",\n  \"searchpath\": [\n    \"https://bower.herokuapp.com\"\n  ],\n  \"shorthand_resolver\": \"git://example.com/{{{ organization }}}/{{{ package }}}.git\"\n}\n```\n\nThe `searchpath` array is useful if your organization wishes to maintain a\nprivate registry of packages while also taking advantage of public Bower\nregistries. If a package is not found at your private endpoint, Bower will\nconsult the registries specified in the `searchpath` array.\n\nThe `shorthand_resolver` key provides support for defining a custom template\nwhich Bower uses when constructing a URL for a given shorthand. For example, if\na shorthand of `twitter/flight` or `twitter/flight#v1.0.0` is specified in the\npackage manifest, the following data can be referenced from within the\n`.bowerrc` as part of the `shorthand_resolver` template:\n\n* `endpoint`: `twitter/flight`\n* `organization`: `twitter`\n* `package`: `flight`\n\n**N.B.** To run your own Bower Endpoint for custom packages that are behind a\nfirewall, you can use a simple implementation of the [Bower\nServer](https://github.com/bower/bower-server).\n\n\n## Defining a package\n\nYou must create a JSON file -- `bower.json` by default -- in your project's\nroot, and specify all of its dependencies. This is similar to Node's\n`package.json`, or Ruby's `Gemfile`, and is useful for locking down a project's\ndependencies.\n\nYou can interactively create a `bower.json` with the following command:\n\n```\nbower init\n```\n\nThe `bower.json` defines several options:\n\n* `name` (required): The name of your package.\n* `version`: A semantic version number (see [semver](http://semver.org/)).\n* `main` [string|array]: The primary endpoints of your package.\n* `ignore` [array]: An array of paths not needed in production that you want\n  Bower to ignore when installing your package.\n* `dependencies` [hash]: Packages your package depends upon in production.\n* `devDependencies` [hash]: Development dependencies.\n\n```json\n{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"main\": \"path/to/main.css\",\n  \"ignore\": [\n    \".jshintrc\",\n    \"**/*.txt\"\n  ],\n  \"dependencies\": {\n    \"<name>\": \"<version>\",\n    \"<name>\": \"<folder>\",\n    \"<name>\": \"<package>\"\n  },\n  \"devDependencies\": {\n    \"<test-framework-name>\": \"<version>\"\n  }\n}\n```\n\n\n## Consuming a package\n\nBower also makes available a source mapping. This can be used by build tools to\neasily consume Bower packages.\n\nIf you pass the `--map` option to Bower's `list` command, it will generate JSON\nwith dependency objects. Alternatively, you can pass the `--paths` option to\nthe `list` command to get a simple path-to-name mapping:\n\n```json\n{\n  \"backbone\": \"bower_components/backbone/index.js\",\n  \"jquery\": \"bower_components/jquery/index.js\",\n  \"underscore\": \"bower_components/underscore/index.js\"\n}\n```\n\n\n## Programmatic API\n\nBower provides a powerful, programmatic API. All commands can be accessed\nthrough the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n  .install(paths, options)\n  .on('end', function (data) {\n    data && console.log(data);\n  });\n\nbower.commands\n  .search('jquery', {})\n  .on('packages', function(packages) {\n    // `packages` is a list of packages returned by searching for 'jquery'\n  });\n```\n\nCommands emit four types of events: `data`, `end`, `result`, and `error`.\n\n`error` will only be emitted if something goes wrong. Not all commands emit all\nevents; for a detailed look, check out the code in `lib/commands`.\n\n`data` is typically a colorized string, ready to show to an end user. `search`\nand `lookup` emit `packages` and `package`, respectively. Those events contain\na JSON representation of the result of the command.\n\nFor a better of idea how this works, you may want to check out [our bin\nfile](https://github.com/bower/bower/blob/master/bin/bower).\n\nFor the install command, there is an additional `package` event that is emitted\nfor each installed/uninstalled package.\n\n\n## Completion (experimental)\n\nBower now has an experimental `completion` command that is based on, and works\nsimilarly to the [npm completion](https://npmjs.org/doc/completion.html). It is\nnot available for Windows users.\n\nThis command will output a Bash / ZSH script to put into your `~/.bashrc`,\n`~/.bash_profile`, or `~/.zshrc` file.\n\n```\nbower completion >> ~/.bash_profile\n```\n\n\n## A note for Windows users\n\nTo use Bower on Windows, you must install\n[msysgit](http://code.google.com/p/msysgit/) correctly. Be sure to check the\noption shown below:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\nNote that if you use TortoiseGit and if Bower keeps asking for your SSH\npassword, you should add the following environment variable: `GIT_SSH -\nC:\\Program Files\\TortoiseGit\\bin\\TortoisePlink.exe`. Adjust the `TortoisePlink`\npath if needed.\n\n\n## Contact\n\nHave a question?\n\n* [StackOverflow](http://stackoverflow.com/questions/tagged/bower)\n* [Mailinglist](http://groups.google.com/group/twitter-bower) - twitter-bower@googlegroups.com\n* [\\#bower](http://webchat.freenode.net/?channels=bower) on Freenode\n\n\n## Contributing to this project\n\nAnyone and everyone is welcome to contribute. Please take a moment to\nreview the [guidelines for contributing](CONTRIBUTING.md).\n\n* [Bug reports](CONTRIBUTING.md#bugs)\n* [Feature requests](CONTRIBUTING.md#features)\n* [Pull requests](CONTRIBUTING.md#pull-requests)\n\n\n## Authors\n\n* [@fat](https://github.com/fat)\n* [@maccman](https://github.com/maccman)\n* [@satazor](https://github.com/satazor)\n\nThanks for assistance and contributions:\n\n* [@addyosmani](https://github.com/addyosmani)\n* [@angus-c](https://github.com/angus-c)\n* [@borismus](https://github.com/borismus)\n* [@carsonmcdonald](https://github/@carsonmcdonald)\n* [@chriseppstein](https://github.com/chriseppstein)\n* [@danwrong](https://github.com/danwrong)\n* [@desandro](https://github.com/desandro)\n* [@hemanth](https://github.com/hemanth)\n* [@isaacs](https://github.com/isaacs)\n* [@josh](https://github.com/josh)\n* [@jrburke](https://github.com/jrburke)\n* [@marcelombc](https://github.com/marcelombc)\n* [@mklabs](https://github.com/mklabs)\n* [@paulirish](https://github.com/paulirish)\n* [@richo](https://github.com/richo)\n* [@rvagg](https://github.com/rvagg)\n* [@sindresorhus](https://github.com/sindresorhus)\n* [@SlexAxton](https://github.com/SlexAxton)\n* [@sstephenson](https://github.com/sstephenson)\n* [@tomdale](https://github.com/tomdale)\n* [@uzquiano](https://github.com/uzquiano)\n* [@visionmedia](https://github.com/visionmedia)\n* [@wagenet](https://github.com/wagenet)\n* [@wibblymat](https://github.com/wibblymat)\n* [@wycats](https://github.com/wycats)\n\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/bower/bower/issues"
  },
  "_id": "bower@0.9.2",
  "_from": "bower@~0.9.2"
}
