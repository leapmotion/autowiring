{
  "name": "update-notifier",
  "version": "0.1.8",
  "description": "Update notifier for your package",
  "keywords": [
    "npm",
    "update",
    "notify",
    "notifier",
    "check",
    "checker"
  ],
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "http://sindresorhus.com"
  },
  "main": "lib/update-notifier.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/yeoman/update-notifier.git"
  },
  "scripts": {
    "test": "mocha --timeout 20000"
  },
  "dependencies": {
    "request": "~2.27.0",
    "configstore": "~0.2.2",
    "semver": "~2.1.0",
    "chalk": "~0.4.0"
  },
  "devDependencies": {
    "mocha": "*"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "licenses": [
    {
      "type": "BSD"
    }
  ],
  "readme": "# update-notifier [![Build Status](https://secure.travis-ci.org/yeoman/update-notifier.png?branch=master)](http://travis-ci.org/yeoman/update-notifier)\r\n\r\n##### Update notifier for your Node.js NPM package\r\n\r\n![screenshot](https://raw.github.com/yeoman/update-notifier/master/screenshot.png)\r\n\r\nInform your package users of updates in a non-intrusive way. Mainly targets global CLI apps.\r\n\r\nWhenever you initiate the update notifier and it's not within the interval threshold, it will asynchronously check with NPM in the background for available updates, then persist the result. The next time the notifier is initiated the result will be loaded into the `.update` property. This prevents any impact on your package startup performance.\r\nThe check process is done with [fork](http://nodejs.org/api/child_process.html#child_process_child_fork). This means that if you call `process.exit`, the check will still be performed in its own process.\r\n\r\n\r\n## About\r\n\r\nThe idea for this module came from the desire to apply the browser update strategy to CLI tools, where everyone is always on the latest version. We first tried automatic updating, which we discovered wasn't popular. This is the second iteration of that idea, but limited to just update notifications.\r\n\r\nThere are a few projects using it:\r\n\r\n- [Yeoman](http://yeoman.io) - modern workflows for modern webapps\r\n\r\n- [Bower](http://bower.io) - a package manager for the web\r\n\r\n- [Roots](http://roots.cx) - a toolkit for advanced front-end development\r\n\r\n- [Automaton](https://github.com/IndigoUnited/automaton) - task automation tool\r\n\r\n- [Spoon.js CLI](https://npmjs.org/package/spoonjs)\r\n\r\n- [Node GH](http://nodegh.io) - GitHub command line tool\r\n\r\n- [Hoodie CLI](http://hood.ie) - Hoodie command line tool\r\n\r\n## Example usage\r\n\r\n```js\r\nvar updateNotifier = require('update-notifier');\r\n\r\n// Checks for available update and returns an instance\r\nvar notifier = updateNotifier();\r\n\r\nif (notifier.update) {\r\n\t// Notify using the built-in convenience method\r\n\tnotifier.notify();\r\n}\r\n\r\n// `notifier.update` contains some useful info about the update\r\nconsole.log(notifier.update);\r\n/*\r\n{\r\n\tlatest: '0.9.5',\r\n\tcurrent: '0.9.3',\r\n\ttype: 'patch', // possible values: latest, major, minor, patch\r\n\tdate: '2012-11-05T14:32:37.603Z',\r\n\tname: 'yeoman'\r\n}\r\n*/\r\n```\r\n\r\n## Example with settings and custom message\r\n\r\n```js\r\nvar notifier = updateNotifier({\r\n\tupdateCheckInterval: 1000 * 60 * 60 * 24 * 7 // 1 week\r\n});\r\n\r\nif (notifier.update) {\r\n\tnotifier.notify('Update available: ' + notifier.update.latest);\r\n}\r\n```\r\n\r\n\r\n## Documentation\r\n\r\n\r\n### updateNotifier([settings])\r\n\r\nChecks if there is an available update. Accepts settings defined below. Returns an object with update info if there is an available update, otherwise `undefined`.\r\n\r\n### updateNotifier.notify([message || defer])\r\n\r\nA convenience method that will inform the user about an available update (see screenshot). By default it will display the message right away. However, if you supply a custom message or `true` it will be displayed right before the process exits.\r\n\r\n\r\n### Settings\r\n\r\n\r\n#### callback\r\n\r\nType: `function`  \r\nDefault: `null`\r\n\r\nIf provided, a callback function will be called,\r\npassed `(error[, update])`\r\n\r\n`update` is equal to `notifier.update`\r\n\r\n\r\n#### packagePath\r\n\r\nType: `string`  \r\nDefault: `'package.json'`\r\n\r\nRelative path to your module `package.json`.\r\n\r\n\r\n#### packageName\r\n\r\nType: `string`  \r\nDefault: Inferred from `packageFile`\r\n\r\nUsed instead of inferring it from `packageFile`.  \r\nRequires you to also specify `packageVersion`.\r\n\r\n\r\n#### packageVersion\r\n\r\nType: `string`  \r\nDefault: Inferred from `packageFile`\r\n\r\nUsed instead of inferring it from `packageFile`.  \r\nRequires you to also specify `packageName`.\r\n\r\n\r\n#### updateCheckInterval\r\n\r\nType: `number`  \r\nDefault: `1000 * 60 * 60 * 24` (1 day)\r\n\r\nHow often it should check for updates.\r\n\r\n\r\n#### updateCheckTimeout\r\n\r\nType: `number`  \r\nDefault: `20000` (20 secs)\r\n\r\nHow long the update can take.  \r\nIf it takes longer than the timeout, it will be aborted.\r\n\r\n#### registryUrl\r\n\r\nType: `string`  \r\nDefault: `'http://registry.npmjs.org/%s'`\r\n\r\nAlternative registry mirrors:\r\n\r\n- `http://85.10.209.91/%s`\r\n- `http://165.225.128.50:8000/%s`\r\n\r\n\r\n### Proxy settings\r\n\r\nIf you are behind a proxy server the `process.env` property is used to take the proxy server value from `HTTP_PROXY` or `HTTPS_PROXY` in order to make the call to the server. This means that you need to [set](https://github.com/sindresorhus/guides/blob/master/set-environment-variables.md) those properties as environment variables.\r\n\r\n\r\n### User settings\r\n\r\nUsers of your module have the ability to opt-out of the update notifier by changing the `optOut` property to `true` in `~/.config/configstore/update-notifier-[your-module-name].yml`. The path is available in `notifier.config.path`.\r\n\r\nYou could also let the user opt-out on a per run basis:\r\n\r\n```js\r\nif (process.argv.indexOf('--no-update-notifier') === -1) {\r\n\t// run updateNotifier()\r\n}\r\n```\r\n\r\n\r\n## License\r\n\r\n[BSD license](http://opensource.org/licenses/bsd-license.php) and copyright Google\r\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/yeoman/update-notifier/issues"
  },
  "homepage": "https://github.com/yeoman/update-notifier",
  "_id": "update-notifier@0.1.8",
  "_from": "update-notifier@~0.1.3"
}
