{
  "name": "astral",
  "version": "0.1.0",
  "description": "AST tooling framework for JavaScript",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/btford/astral.git"
  },
  "keywords": [
    "ast",
    "tool"
  ],
  "author": {
    "name": "Brian Ford"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "gitHead": "db055d670dd139c52e1741769e343baa56a8bdf0",
  "bugs": {
    "url": "https://github.com/btford/astral/issues"
  },
  "dependencies": {
    "clone": "~0.1.9"
  },
  "readme": "# Astral\n\nAST tooling framework for JavaScript focused on modularity and performance.\nThe goal is to make it easy to create, share, and combine tools that operate on ASTs.\nThe architecture inspired by llvm.\n\n## How it Works\n\nVarious [passes](https://github.com/btford/astral-pass) are registered in Astral.\nEsprima (parser) creates AST.\nAstral runs the passes in order based on their prerequisites.\n\n## Install\n\n`npm install astral`\n\n## Example\n\n```javascript\nvar esprima = require('esprima');\nvar escodegen = require('escodegen');\n\nvar astral = require('astral')();\nvar myPass = require('astral-pass')();\n\nmyPass.name = 'myPass';\n\nmyPass.\n  when({\n    // ... AST chunk\n  }).\n  when(function (chunk, info) {\n    // return true or false\n  }).\n  transform(function (chunk, info) {\n\n  });\n\nastral.register(myPass);\n\nvar ast = esprima.parse('var x = 42;');\n\nvar newAst = astral.run(ast);\n\nvar newSrc = escodegen.generate(newAst);\n\nconsole.log(newSrc);\n```\n\n## Writing a Pass\n\nA pass is just an object with three properties:\n\n```\nvar myPass = {\n  name: 'my:pass',\n  prereqs: [],\n  run: function (ast, info) {\n    return {};\n  }\n}\n```\n\n### name\nThe name of the pass. Used to reference prereqs and info.\n\n### prereqs\nAn array of passes expected to be run before this pass is run.\n\n### run\nThe function for transforming the AST. It takes two arguments: `ast`, and `info`. It should return an `info` object to be associated with this pass.\n\n## Why?\n\nSource transform tools all have to solve the same problems:\n\n1. read the file(s)\n2. parse the code into an AST\n3. look for interesting features\n4. modify the AST\n5. generate code\n6. save the code back to a file(s)\n\nUsing multiple code transform tools results in a lot of expensive, repeated work.\nItems 1-2 and 5-6 above are usually *exactly* the same across tools,\nand 3-4 are often implemented with similar, generic algorithms using different parameters or slightly different behaviors.\n\nAstral is a framework that lets you plug in a set of \"passes\" that do steps 3-4,\nwhile generically sharing the rest of the process.\n\n### What about...\nHow does Astral compare to these projects?\n\n#### [Falafel](https://github.com/substack/node-falafel)\nFalafel is a lib for doing source transforms.\nYou could use it inside of an Astral pass.\n\n#### [Rocambole](https://github.com/millermedeiros/rocambole/)\nRocambole is like Falafel: a tool for making the changes.\nAgain, it'd be great to make use of this library inside of a pass.\n\n#### [Browserify](https://github.com/substack/node-browserify)\nBrowserify is a tool that does source code transforms as a module/build solution.\nBrowserify has the option to include your own transforms that get run before Browserify transforms CommonJS-style modules into a format that's more suitable for web browsers.\nThe downside of this system is that you can't easily use these transforms if you're not using Browserify.\nIdeally, Browserify could be built on top of Astral.\n\n#### [ngmin](https://github.com/btford/ngmin)\nngmin does transforms on AngularJS apps to make the source easier to minify.\nIdeally, ngmin could also be built on top of Astral.\nThe advantage to this is that it would be easier and faster to combine a build process using both ngmin and Browserify.\nCurrently, both of these tools separately read files, parse into an AST, generate code form the AST, and save back to a file.\n\n#### [Grunt](http://gruntjs.com/)\nGrunt is a task runner.\nIt is often used as a build tool, concatenating and minifying files.\nGrunt typically runs on a per-file basis, which makes it great for a wide variety of cases, but a poor choice for source transforms since you typically end up reading/writing the same file multiple times.\nYou can think of Astral as \"Grunt tasks, but for ASTs instead of files.\"\nYou could write a Grunt task to run Astral passes to integrate the two.\n\n## License\nMIT\n",
  "homepage": "https://github.com/btford/astral",
  "_id": "astral@0.1.0",
  "_from": "astral@~0.1.0"
}
