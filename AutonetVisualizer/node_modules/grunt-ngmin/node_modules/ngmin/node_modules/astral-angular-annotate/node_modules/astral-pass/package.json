{
  "name": "astral-pass",
  "version": "0.1.0",
  "description": "Pass system for Astral",
  "main": "pass.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/btford/astral-pass.git"
  },
  "keywords": [
    "astral"
  ],
  "author": {
    "name": "Brian Ford"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/btford/astral-pass/issues"
  },
  "readme": "# Astral Pass\n\nPass helper for [Astral](https://github.com/btford/astral-pass) that simplifies traversal.\n\n## Example\n\nBelow is a simple example.\n\n```javascript\nvar myPass = require('astral-pass')();\n\nmyPass.name = 'myPass';\nmyPass.prereqs = [ /* other pass names here */ ];\n\nmyPass.\n  when({\n    // ... AST chunk\n  }).\n  when(function (chunk, info) {\n    // return true or false\n  }).\n  do(function (chunk, info) {\n\n  });\n```\n\n## More Complicated Passes\n\nYou can introduce more complicated behavior by composing passes.\nThis is done by modifying a pass's `prereqs` property.\n\n```javascript\nvar astralPass = require('astral-pass');\n\n// p1 needs some info to do its transformations\n\nvar p1 = astralPass();\np1.name = 'myPass';\np1.prereqs = [ 'p2' ];\n\np1.\n  when( ... ).\n  do( ... );\n\n// p2 gathers the info for p1\n\nvar p2 = astralPass();\np2.name = 'myPass';\n\np2.\n  when( ... ).\n  do( ... );\n\n```\n\nI recommend namespacing passes with `:`.\n\n## License\nMIT\n",
  "homepage": "https://github.com/btford/astral-pass",
  "_id": "astral-pass@0.1.0",
  "_from": "astral-pass@~0.1.0"
}
